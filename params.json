{"name":"Hatch","body":"Overview\r\n========\r\n\r\nGetting started with Chef can be difficult. Hatch aims to get you up and \r\nrunning quickly, either locally using virtual machines or remotely with\r\nEC2 instances.\r\n\r\nThere also exists the chicken-or-the-egg problem of deploying a live Chef\r\nserver without a pre-existing Chef server to manage it. If you're uncomfortable\r\n(or prohibited from) using the Opscode Platform, Hatch can make it trivial\r\nto bootstrap a live, self-managed Chef server using Chef Solo remotely.\r\n\r\n\r\nHow It Works\r\n============\r\n\r\nHatch contains a Knife plugin and Vagrant provisioner that are capable of\r\nbootstrapping a live Chef server. The server is automatically pre-seeded \r\nwith all the cookbooks and roles from your Chef repository and provisioned\r\nto your liking with Chef Solo. After the initial Chef Solo run, management\r\nis handed off to the Chef server running on the host. For remote (EC2) \r\nhosts, Hatch copies your Chef repository over the wire and bootstraps the\r\nChef server using Chef Solo.\r\n\r\nA local Knife configuration file (`chef-hatch-repo/.chef/knife.rb` by \r\ndefault) is generated along with an admin Chef client (`hatch` by default), \r\nallowing instant control over the hatched Chef server from the command\r\nline.\r\n\r\nHatch uses the `chef-server` and `chef-client` cookbooks from the official\r\nOpscode cookbooks repository.\r\n\r\n\r\nRequirements\r\n============\r\n\r\n* Virtualbox (>= 4.1.0)\r\n* Vagrant (>= 1.0.0) *optionally installed by `.rvmrc`*\r\n* Chef (>= 0.10.8) *optionally installed by `.rvmrc`*\r\n* Knife-EC2 (>= 0.5.10) *optionally installed by `.rvmrc`*\r\n* Librarian (>= 0.0.14) *optionally installed by `.rvmrc`*\r\n\r\n\r\nSuggested\r\n=========\r\n\r\n* RVM (project `.rvmrc` included)\r\n\r\n\r\nGetting Started\r\n===============\r\n\r\nThe Hatch repository has been forked from the official Opscode chef-repo\r\nrepository. That means it's a convenient starting point for your own Chef\r\nrepository. To begin, clone the Hatch repository:\r\n\r\n    Stewart:Code xdissent$ git clone https://github.com/xdissent/chef-hatch-repo.git\r\n    Cloning into chef-hatch-repo...\r\n    remote: Counting objects: 570, done.\r\n    remote: Compressing objects: 100% (294/294), done.\r\n    remote: Total 570 (delta 208), reused 518 (delta 187)\r\n    Receiving objects: 100% (570/570), 156.65 KiB, done.\r\n    Resolving deltas: 100% (208/208), done.\r\n    Stewart:Code xdissent$ cd chef-hatch-repo/\r\n\r\n\r\nCookbooks are managed by [Librarian](https://github.com/applicationsonline/librarian) \r\nand must be installed before use:\r\n\r\n    Stewart:chef-hatch-repo(master) xdissent$ librarian-chef install\r\n\r\n\r\nTo update the cookbooks to the latest available versions, run \r\n`librarian-chef update`. See the [Librarian](https://github.com/applicationsonline/librarian) \r\ndocumentation for more info.\r\n    \r\nThen hatch a Chef server in a virtual machine:\r\n\r\n    Stewart:chef-hatch-repo(master) xdissent$ vagrant up chef\r\n    [chef] Provisioning enabled with HatchProvisioner...\r\n    [chef] Importing base box 'lucid64-chef-0.10.2'...\r\n    [chef] Matching MAC address for NAT networking...\r\n    [chef] Running any VM customizations...\r\n    [chef] Clearing any previously set forwarded ports...\r\n    [chef] Forwarding ports...\r\n    [chef] -- ssh: 22 => 2222 (adapter 1)\r\n    [chef] Creating shared folders metadata...\r\n    [chef] Preparing host only network...\r\n    [chef] Booting VM...\r\n    [chef] Waiting for VM to boot. This can take a few minutes.\r\n    [chef] VM booted and ready for use!\r\n    [chef] Enabling host only network...\r\n    [chef] Setting host name...\r\n    [chef] Mounting shared folders...\r\n    [chef] -- v-csc-0: /tmp/vagrant-chef/cookbooks-0\r\n    [chef] -- v-root: /vagrant\r\n    [chef] -- v-csr-0: /tmp/vagrant-chef/roles-0\r\n    [chef] Running provisioner: HatchProvisioner...\r\n    [chef] Generating chef JSON and uploading...\r\n    [chef] Running chef-solo...\r\n    [chef] [Sat, 04 Jun 2011 13:37:35 -0700] INFO: *** Chef 0.10.2 ***\r\n    : stdout\r\n    [chef] [Sat, 04 Jun 2011 13:37:36 -0700] DEBUG: Building node object for chef.local\r\n    : stdout\r\n    [chef] [Sat, 04 Jun 2011 13:37:36 -0700] DEBUG: Extracting run list from JSON attributes provided on command line\r\n    …\r\n    [chef] [Sat, 04 Jun 2011 13:49:43 -0700] INFO: Running report handlers\r\n    : stdout\r\n    [chef] [Sat, 04 Jun 2011 13:49:43 -0700] INFO: Report handlers complete\r\n    : stdout\r\n    [chef] [Sat, 04 Jun 2011 13:49:43 -0700] DEBUG: Exiting\r\n    : stdout\r\n    [chef] : stdout\r\n    [chef] Creating chef user hatch\r\n    [chef] Grabbing client key\r\n    [chef] Grabbing validation key\r\n\r\n\r\nThe Chef server can be managed using the `knife` command:\r\n\r\n    Stewart:chef-hatch-repo(master) xdissent$ knife status\r\n    5 minutes ago, chef.local, chef.local, 10.0.2.15, ubuntu 10.04.\r\n    Stewart:chef-hatch-repo(master) xdissent$ knife cookbook list\r\n    apache2           0.99.3\r\n    apt               1.1.1\r\n    bluepill          0.2.0\r\n    build-essential   1.0.0\r\n    chef-client       0.99.5\r\n    chef-server       0.99.11\r\n    couchdb           0.14.1\r\n    daemontools       0.9.0\r\n    erlang            0.8.2\r\n    gecode            0.99.0\r\n    java              1.1.0\r\n    openssl           0.1.0\r\n    runit             0.14.2\r\n    ucspi-tcp         1.0.0\r\n    xml               0.1.0\r\n    zlib              0.1.0\r\n\r\n\r\nBy default, the Chef WebUI is enabled and running at \r\n`http://<chef-server-url>:4040` (`http://192.168.10.10:4040` by default for\r\nvirtual machines).\r\n\r\nA `demo` virtual machine is defined in Hatch's `Vagrantfile` to demonstrate\r\nhow to launch a node to be managed by the hatched Chef server:\r\n\r\n    Stewart:chef-hatch-repo(master) xdissent$ vagrant up demo\r\n    [demo] Fixed port collision 'ssh'. Now on port 2200.\r\n    [demo] Provisioning enabled with chef_server...\r\n    [demo] Importing base box 'lucid64-chef-0.10.2'...\r\n    [demo] Matching MAC address for NAT networking...\r\n    [demo] Running any VM customizations...\r\n    [demo] Clearing any previously set forwarded ports...\r\n    [demo] Forwarding ports...\r\n    [demo] -- ssh: 22 => 2200 (adapter 1)\r\n    [demo] Creating shared folders metadata...\r\n    [demo] Preparing host only network...\r\n    [demo] Booting VM...\r\n    [demo] Waiting for VM to boot. This can take a few minutes.\r\n    [demo] VM booted and ready for use!\r\n    [demo] Enabling host only network...\r\n    [demo] Setting host name...\r\n    [demo] Mounting shared folders...\r\n    [demo] -- v-root: /vagrant\r\n    [demo] Running provisioner: Vagrant::Provisioners::ChefServer...\r\n    [demo] Creating folder to hold client key...\r\n    [demo] Uploading chef client validation key...\r\n    [demo] Generating chef JSON and uploading...\r\n    [demo] Running chef-client...\r\n    …\r\n    [demo] [Sat, 04 Jun 2011 14:34:26 -0700] INFO: Chef Run complete in 29.351055 seconds\r\n    : stdout\r\n    [demo] [Sat, 04 Jun 2011 14:34:26 -0700] INFO: Running report handlers\r\n    : stdout\r\n    [demo] [Sat, 04 Jun 2011 14:34:26 -0700] INFO: Report handlers complete\r\n    : stdout\r\n    [demo] : stdout\r\n    Stewart:chef-hatch-repo(master) xdissent$ knife status\r\n    7 minutes ago, chef.local, chef.local, 10.0.2.15, ubuntu 10.04.\r\n    2 minutes ago, demo.local, demo.local, 10.0.2.15, ubuntu 10.04.\r\n\r\n\r\nWorking With EC2\r\n================\r\n\r\nThe Hatch Knife plugin launches and provisions a live chef server as an EC2 \r\ninstance. It takes the same options as the `knife-ec2` plugin's \r\n`knife ec2 server create`:\r\n\r\n    Stewart:chef-hatch-repo(master) xdissent$ knife hatch -f m1.small -I ami-e4d42d8d -G chef,ssh,default -Z us-east-1c -N chef.xdissent.com -S xdissent -x ubuntu -i ~/.ssh/aws-xdissent.pem -A <aws-key-id> -K <aws-secret> --region us-east-1\r\n    WARNING: No knife configuration file found\r\n    Instance ID: i-d5d35ebb\r\n    Flavor: m1.small\r\n    Image: ami-e4d42d8d\r\n    Availability Zone: us-east-1c\r\n    Security Groups: chef, ssh, default\r\n    SSH Key: xdissent\r\n    \r\n    Waiting for server...........................\r\n    Public DNS Name: ec2-50-19-143-129.compute-1.amazonaws.com\r\n    Public IP Address: 50.19.143.129\r\n    Private DNS Name: ip-10-91-27-138.ec2.internal\r\n    Private IP Address: 10.91.27.138\r\n    \r\n    Waiting for sshd..done\r\n    Creating temporary directory\r\n    Creating solo config\r\n    Copying files to temporary directory\r\n    Creating chef-hatch tarball\r\n    …\r\n    Copying chef-hatch tarball to host\r\n    Warning: Permanently added '50.19.143.129' (RSA) to the list of known hosts.\r\n    chef-hatch.tgz                                                                                                                                                                                          100%   71KB  70.6KB/s   00:00    \r\n    Bootstrapping Chef on ec2-50-19-143-129.compute-1.amazonaws.com\r\n    0% [Working]3-129.compute-1.amazonaws.com \r\n    Get:1 http://security.ubuntu.com lucid-security Release.gpg [198B]\r\n    Ign http://security.ubuntu.com/ubuntu/ lucid-security/main Translation-en_US   \r\n    Ign http://security.ubuntu.com/ubuntu/ lucid-security/universe Translation-en_US\r\n    96% [Connecting to us-east-1.ec2.archive.ubuntu.com (10.252.111.96)]           \r\n    Get:2 http://security.ubuntu.com lucid-security Release [44.7kB]    \r\n    0% [Connecting to us-east-1.ec2.archive.ubuntu.com (10.252.111.96)] [2 Release \r\n    …\r\n    ec2-50-19-143-129.compute-1.amazonaws.com [Sun, 05 Jun 2011 03:06:47 +0000] INFO: Chef Run complete in 440.602521 seconds\r\n    ec2-50-19-143-129.compute-1.amazonaws.com [Sun, 05 Jun 2011 03:06:47 +0000] INFO: Running report handlers\r\n    ec2-50-19-143-129.compute-1.amazonaws.com [Sun, 05 Jun 2011 03:06:47 +0000] INFO: Report handlers complete\r\n    Creating admin user\r\n    Copying keys\r\n    Downloading keys\r\n    validation.pem                                                                                                                                                                                          100% 1675     1.6KB/s   00:00    \r\n    hatch.pem                                                                                                                                                                                               100% 1679     1.6KB/s   00:00    \r\n    Creating knife.rb\r\n    Uploading all cookbooks\r\n    Uploading all roles\r\n    Finishing hatching and restarting chef-client\r\n    Removing temporary directory\r\n    \r\n    Instance ID: i-d5d35ebb\r\n    Flavor: m1.small\r\n    Image: ami-e4d42d8d\r\n    Availability Zone: us-east-1c\r\n    Security Groups: default, ssh, chef\r\n    Public DNS Name: ec2-50-19-143-129.compute-1.amazonaws.com\r\n    Public IP Address: 50.19.143.129\r\n    Private DNS Name: ip-10-91-27-138.ec2.internal\r\n    SSH Key: xdissent\r\n    Private IP Address: 10.91.27.138\r\n    Root Device Type: instance-store\r\n    Environment: _default\r\n    Run List: role[chef_server]\r\n    Stewart:chef-hatch-repo(master) xdissent$ knife status\r\n    2 minutes ago, chef.xdissent.com, ec2-50-19-143-129.compute-1.amazonaws.com, 50.19.143.129, ubuntu 10.04.\r\n\r\nLike the `knife ec2 server create` command, `knife hatch` may be configured \r\nusing a `knife.rb` file, but **this file will be overwritten** each time you\r\nhatch a chef server! This will change in the future.\r\n","tagline":"Easily create a live, self-managed Chef server","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}